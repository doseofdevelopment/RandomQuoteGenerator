{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","faQuoteLeft","faTwitter","colors","App","state","quotes","quote","author","index","bgColor","colorIndex","getRandomIndex","length","Math","floor","random","setState","console","log","fetch","res","json","this","TweetURL","element","icon","quoteElement","style","backgroundColor","color","className","id","href","target","rel","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"wPAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKdQ,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,KAUZ,IAAMC,EAAS,CAAC,UAAU,UAAU,UAAU,UAAU,WASlDC,E,4MAEJC,MAAQ,CACNC,OAAQ,CAAE,CACRC,MAAM,8EAAoEC,OAAO,gBACnFC,MAAO,EACPC,QAAS,GACTC,WAAY,G,EAadC,eAAiB,WAAO,IACdN,EAAW,EAAKD,MAAhBC,OAER,GAAIA,EAAOO,OAAS,EAAG,CACrB,IAAMJ,EAAQK,KAAKC,MAAMD,KAAKE,SAAWV,EAAOO,QAC1CF,EAAaG,KAAKC,MAAMD,KAAKE,SAAWb,EAAOU,QACrD,EAAKI,SAAS,CACZR,QACAE,eAGFO,QAAQC,IAAIV,GACZS,QAAQC,IAAIR,K,kEAtBK,IAAD,OAClBS,MAdF,0IAca3B,MAAK,SAAA4B,GAAG,OAAIA,EAAIC,UACxB7B,MAAK,SAAA4B,GACJ,EAAKJ,SAAS,CACZX,OAAQe,EAAIf,QACX,EAAKM,qB,+BAwBJ,IAAD,EAC+BW,KAAKlB,MAAnCC,EADD,EACCA,OAAQG,EADT,EACSA,MAAOE,EADhB,EACgBA,WAEjBJ,EAAQD,EAAOG,GACfC,EAAUP,EAAOQ,GACvBO,QAAQC,IAAIT,GAEZ,IAAMc,EAAQ,iDAA6CjB,EAAMA,MAAnD,eAA+DA,EAAMC,QAE7EiB,EAAU,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,aACzCC,EAAe,cAAC,IAAD,CAAiBD,KAAM,CAAC,MAAO,gBAGpD,OACE,qBAAME,MAAO,CAACC,gBAAiB1B,EAAOQ,GAAamB,MAAO3B,EAAOQ,IAAcoB,UAAU,2DAAzF,SAEE,sBAAKA,UAAU,wBAAwBC,GAAG,YAA1C,UAEIzB,GACE,sBAAKwB,UAAU,QAAf,UACGJ,EACD,mBAAGK,GAAG,OAAN,SAAczB,EAAMA,QACpB,uBAAMyB,GAAG,SAASD,UAAU,0BAA5B,eAAyDxB,EAAMC,aAIrE,sBAAKuB,UAAU,gCAAf,UACE,oBAAGC,GAAG,cAAcC,KAAMT,EAAUU,OAAO,SAASC,IAAI,aAAaJ,UAAU,gCAAgCH,MAAO,CAACC,gBAAiB1B,EAAOQ,IAA/I,UACGc,EADH,YAGA,wBAAQO,GAAG,YAAYD,UAAU,+BAA+BK,QAASb,KAAKX,eAAgBgB,MAAO,CAACC,gBAAiB1B,EAAOQ,IAA9H,uC,GArEM0B,IAAMC,WAkFxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,QAMjDpD,M","file":"static/js/main.cd2bab75.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\n\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nlibrary.add(faQuoteLeft)\nlibrary.add(faTwitter);\n\n<link\n  rel=\"stylesheet\"\n  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n  integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n  crossorigin=\"anonymous\"\n/>\n\n/* Array */\nconst colors = [\"#131316\",\"#061747\",\"#0d2029\",\"#132d4f\",\"#356f75\"];\n\n\n\n//API URL\nconst API =\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\n// import ReactDOM\nclass App extends React.Component {\n  \n  state = {\n    quotes: [ {\n      quote:\"Life isn’t about getting and having, it’s about giving and being.\",author:\"Kevin Kruse\"}],\n    index: 0,\n    bgColor: '',\n    colorIndex: 0\n  };\n\n  componentDidMount() {\n    fetch(API).then(res => res.json())\n      .then(res => {\n        this.setState({\n          quotes: res.quotes\n        }, this.getRandomIndex);\n      });\n\n  }\n\n  getRandomIndex = () => {\n    const { quotes } = this.state;\n\n    if (quotes.length > 0) {\n      const index = Math.floor(Math.random() * quotes.length);\n      const colorIndex = Math.floor(Math.random() * colors.length);\n      this.setState({\n        index,\n        colorIndex\n        \n      });\n      console.log(index)\n      console.log(colorIndex)\n    }\n  }\n\n \n\n  //Render the DOM\n  render() {\n    const { quotes, index, colorIndex } = this.state;\n\n    const quote = quotes[index];\n    const bgColor = colors[colorIndex];\n    console.log(bgColor)\n\n    const TweetURL = `https://twitter.com/intent/tweet?text=\"${quote.quote}\" - ${quote.author}`;\n\n    const element = <FontAwesomeIcon icon={['fab', 'twitter']} />\n    const quoteElement = <FontAwesomeIcon icon={['fas', 'quote-left']} />\n\n\n    return (\n      <div  style={{backgroundColor: colors[colorIndex], color: colors[colorIndex]}} className=\"d-flex justify-content-center align-items-center vh-100 \">\n      \n        <div className=\"col-sm-6 p-4 rounded \" id=\"quote-box\">\n          {\n            quote && (\n              <div className=\"mb-3 \">\n                {quoteElement}\n                <p id=\"text\">{quote.quote}</p>\n                <cite id=\"author\" className=\"d-block text-right mb-3\">- {quote.author}</cite>\n              </div>\n            )\n          }\n          <div className=\"d-flex justify-content-around\">\n            <a id=\"tweet-quote\" href={TweetURL} target=\"_blank\" rel=\"noreferrer\" className=\"btn btn-primary p-2 border-0 \" style={{backgroundColor: colors[colorIndex]}}>\n              {element} Tweet\n              </a>\n            <button id=\"new-quote\" className=\"btn btn-primary p-2 border-0\" onClick={this.getRandomIndex} style={{backgroundColor: colors[colorIndex]}}>\n              Get New Quote\n              </button>\n          </div>\n        </div>\n\n        {/* <div className=\"footer inline-block\">by dose of development</div> */}\n     \n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}